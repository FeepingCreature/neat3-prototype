function main() {
    auto tree = BinaryTree(5);
    tree.insert(3);
    tree.insert(7);
    tree.insert(1);
    tree.insert(9);

    print(tree.contains(7));  // Should print 1 (true)
    print(tree.contains(4));  // Should print 0 (false)

    print(tree.sum());        // Should print 25 (sum of all nodes)

    print(tree.depth());      // Should print 3 (depth of the tree)

    return 0;
}

class BinaryTree {
    auto value;
    auto left;
    auto right;

    function init(val) {
        this.value = val;
        this.left = null;
        this.right = null;
    }

    function insert(val) {
        if (val.smaller(this.value)) {
            if (this.left.isNull()) {
                this.left = BinaryTree(val);
            } else {
                this.left.insert(val);
            }
        } else {
            if (this.right.isNull()) {
                this.right = BinaryTree(val);
            } else {
                this.right.insert(val);
            }
        }
    }

    function contains(val) {
        if (val.equal(this.value)) {
            return 1;
        }
        if (val.smaller(this.value)) {
            if (this.left.isNull()) {
                return 0;
            }
            return this.left.contains(val);
        } else {
            if (this.right.isNull()) {
                return 0;
            }
            return this.right.contains(val);
        }
    }

    function sum() {
        auto total = this.value;
        if (this.left.isNull().equal(0)) {
            total = total.add(this.left.sum());
        }
        if (this.right.isNull().equal(0)) {
            total = total.add(this.right.sum());
        }
        return total;
    }

    function depth() {
        auto leftDepth = 0;
        auto rightDepth = 0;

        if (this.left.isNull().equal(0)) {
            leftDepth = this.left.depth();
        }
        if (this.right.isNull().equal(0)) {
            rightDepth = this.right.depth();
        }

        if (leftDepth.greater(rightDepth)) {
            return leftDepth.add(1);
        } else {
            return rightDepth.add(1);
        }
    }
}
