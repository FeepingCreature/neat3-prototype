// main.n3

/**

Simplifications for the bootstrap, 0.1 version of the language:

- C bootstrap implementation language, C compile target
  (everyone has C)
- untyped runtime only, no types, no constraints
- classes, fields and methods (for the AST), hence object method calls
- global functions and function calls
- arrays (can be typeless)
- no modules, single file only
- no structs, classes can handle it
- enough runtime to do basic I/O: read file to char[], write char[] to file, print to console.
- mutable variables, everything is mutable
- no typechecks, all done as asserts in the runtime
- runtime types: class, array, int.
- blocks, if statements, while statements, for-in loops
- no GC/RC, leak everything
- no error propagation, every error kills the program right there (assert runtime function)
- no operands at all, builtin type functions only (.add, .sub, .concat etc.), this also handles string ops
  (.slice, .concat), and conversions (.toInt, .toString).
- basic inheritance
**/

class CodegenContext {
    auto parent;
    auto variableCounter;
    auto code;

    function init(parent) {
        this.parent = parent;
        this.variableCounter = 0;
        this.code = [];
    }

    function newVariable() {
        if (!this.parent.isNull()) {
            return this.parent.newVariable();
        }
        this.variableCounter = this.variableCounter + 1;
        return "v" ~ this.variableCounter.toString();
    }

    function emitLine(line) {
        this.code = this.code.push(line);
    }

    function getCurrentCode() {
        return this.code.join("\n");
    }
}

class TopLevelASTNode {
    auto filename;
    auto line;

    function init(filename, line) {
        this.filename = filename;
        this.line = line;
    }

    function compile(prog) {
        return "";
    }
}

// node that appears in a function
class ASTFunctionNode {
    auto filename;
    auto line;

    function init(filename, line) {
        this.filename = filename;
        this.line = line;
    }

    function compile(context) {
        return "";
    }
}

class Program {
    auto filename;
    auto line;
    auto nodes;

    function init(filename, line, nodes) {
        this.filename = filename;
        this.line = line;
        this.nodes = nodes;
    }

    function compile() {
        auto compiledNodes = [];
        for (node in this.nodes) {
            compiledNodes = compiledNodes.push(node.compile(this));
        }
        return compiledNodes.join("\n");
    }

    function findClass(name) {
        for (node in this.nodes) {
            auto classDecl = node.instanceOf(ClassDecl);
            if (!classDecl.isNull() && classDecl.name == name) {
                return classDecl;
            }
        }
        return null;
    }
}

class FunctionDecl : TopLevelASTNode {
    auto name;
    auto params;
    auto body;

    function init(filename, line, name, params, body) {
        this.filename = filename;
        this.line = line;
        this.name = name;
        this.params = params;
        this.body = body;
    }

    function compile(prog) {
        auto bodyContext = CodegenContext(null);
        auto compiledBody = [];
        for (stmt in this.body) {
            compiledBody = compiledBody.push(stmt.compile(bodyContext));
        }

        auto functionBody = bodyContext.getCurrentCode();
        auto emittedName = this.name;
        if (this.name == "main") {
            emittedName = "main2";
        }

        return "Value " ~ emittedName ~ "(Module* mod, Value* args, size_t arg_count) {\n" ~
               "    if (arg_count != " ~ this.params.length().toString() ~ ") {\n" ~
               "        fprintf(stderr, \"" ~ this.name ~ " expects " ~ this.params.length().toString() ~ " argument(s)\\n\");\n" ~
               "        exit(1);\n" ~
               "    }\n" ~
               this.compileParamAssignments() ~
               "    " ~ functionBody ~ "\n" ~
               "    return create_null();\n" ~
               "}\n";
    }

    function compileParamAssignments() {
        auto assignments = [];
        auto i = 0;
        for (param in this.params) {
            assignments = assignments.push("    Value " ~ param ~ " = args[" ~ i.toString() ~ "];");
            i = i + 1;
        }
        return assignments.join("\n");
    }
}

class VTableEntry {
    auto name;
    auto function;

    function init(name, function_) {
        this.name = name;
        this.function = function_;
    }
}

class VTable {
    auto entries;

    function init() {
        this.entries = [];
    }

    function addEntry(name, function_) {
        for (entry in this.entries) {
            if (entry.name == name) {
                entry.function = function_;
                return 0;
            }
        }
        // If not found, add as a new entry
        this.entries = this.entries.push(VTableEntry(name, function_));
        return 0;
    }
}

class ClassDecl : TopLevelASTNode {
    auto name;
    auto parent;
    auto fields;
    auto methods;

    function init(filename, line, name, parent, fields, methods) {
        this.filename = filename;
        this.line = line;
        this.name = name;
        this.parent = parent;
        this.fields = fields;
        this.methods = methods;
    }

    function compile(prog) {
        auto compiledMethods = [];
        for (method in this.methods) {
            compiledMethods = compiledMethods.push(this.compileMethod(method));
        }

        return compiledMethods.join("\n") ~ "\n" ~
               this.compileClassTypeInitializer(prog);
    }

    function buildVTable(prog) {
        auto vtable = null;
        if (this.parent == "") {
            vtable = VTable();
        } else {
            auto parentClass = prog.findClass(this.parent);
            vtable = parentClass.buildVTable(prog);
        }

        for (method in this.methods) {
            vtable.addEntry(method.name, this.name ~ "_" ~ method.name);
        }

        return vtable;
    }

    function compileMethod(method) {
        auto context = CodegenContext(null);
        auto compiledBody = [];
        for (stmt in method.body) {
            compiledBody = compiledBody.push(stmt.compile(context));
        }

        auto functionBody = context.getCurrentCode();
        auto argCount = method.params.length();

        return "Value " ~ this.name ~ "_" ~ method.name ~ "(Module* mod, Value* this_ptr, Value* args, size_t arg_count) {\n" ~
               "    if (arg_count != " ~ argCount.toString() ~ ") {\n" ~
               "        fprintf(stderr, \"" ~ method.name ~ " expects " ~ argCount.toString() ~ " argument(s)\\n\");\n" ~
               "        exit(1);\n" ~
               "    }\n" ~
               "    Value* self = this_ptr->data.object.fields;\n" ~
               this.compileMethodParamAssignments(method) ~
               "    " ~ functionBody ~ "\n" ~
               "    return create_null();\n" ~
               "}\n";
    }

    function compileMethodParamAssignments(method) {
        auto assignments = [];
        auto i = 0;
        for (param in method.params) {
            assignments = assignments.push("    Value " ~ param ~ " = args[" ~ i.toString() ~ "];");
            i = i + 1;
        }
        return assignments.join("\n");
    }

    function compileClassTypeInitializer(prog) {
        auto fieldNameInitializers = [];
        auto current = this;
        while (!current.isNull()) {
            for (field in current.fields) {
                fieldNameInitializers = fieldNameInitializers.push("\"" ~ field ~ "\"");
            }
            if (current.parent == "") {
                current = null;
            } else {
                current = prog.findClass(current.parent);
            }
        }

        auto vtable = this.buildVTable(prog);
        auto methodNameInitializers = [];
        auto methodFuncInitializers = [];
        for (entry in vtable.entries) {
            methodNameInitializers = methodNameInitializers.push("\"" ~ entry.name ~ "\"");
            methodFuncInitializers = methodFuncInitializers.push(entry.function);
        }

        auto parentStr = "";
        if (this.parent == "") {
            parentStr = "NULL";
        } else {
            parentStr = "&" ~ this.parent ~ "_type";
        }

        return "ClassType " ~ this.name ~ "_type = {\n" ~
               "    .base = {\n" ~
               "        .methods = (MethodFunc[]){" ~ methodFuncInitializers.join(", ") ~ "},\n" ~
               "        .method_names = (char*[]){" ~ methodNameInitializers.join(", ") ~ "},\n" ~
               "        .method_count = " ~ vtable.entries.length().toString() ~ "\n" ~
               "    },\n" ~
               "    .name = \"" ~ this.name ~ "\",\n" ~
               "    .parent = " ~ parentStr ~ ",\n" ~
               "    .field_names = (char*[]){" ~ fieldNameInitializers.join(", ") ~ "},\n" ~
               "    .field_count = " ~ fieldNameInitializers.length().toString() ~ "\n" ~
               "};\n";
    }
}

class VariableDecl : ASTFunctionNode {
    auto name;
    auto initializer;

    function init(filename, line, name, initializer) {
        this.filename = filename;
        this.line = line;
        this.name = name;
        this.initializer = initializer;
    }

    function compile(context) {
        auto initVar = this.initializer.compile(context);
        context.emitLine("Value " ~ this.name ~ " = " ~ initVar ~ ";");
        return "";
    }
}

class MethodCall : ASTFunctionNode {
    auto object;
    auto method;
    auto args;

    function init(filename, line, object, method, args_) {
        this.filename = filename;
        this.line = line;
        this.object = object;
        this.method = method;
        this.args = args_;
    }

    function compile(context) {
        auto objectVar = this.object.compile(context);
        auto compiledArgs = [];
        for (arg in this.args) {
            compiledArgs = compiledArgs.push(arg.compile(context));
        }
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = call_method(mod, &" ~ objectVar ~ ", \"" ~ this.method ~ "\", (Value[]){" ~ compiledArgs.join(", ") ~ "}, " ~ this.args.length().toString() ~ ");");
        return resultVar;
    }
}

class FunctionCall : ASTFunctionNode {
    auto name;
    auto args;

    function init(filename, line, name, args_) {
        this.filename = filename;
        this.line = line;
        this.name = name;
        this.args = args_;
    }

    function compile(context) {
        auto compiledArgs = [];
        for (arg in this.args) {
            compiledArgs = compiledArgs.push(arg.compile(context));
        }
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = module_call(mod, \"" ~ this.name ~ "\", (Value[]){" ~ compiledArgs.join(", ") ~ "}, " ~ this.args.length().toString() ~ ");");
        return resultVar;
    }
}

class IfStatement : ASTFunctionNode {
    auto condition;
    auto thenBody;
    auto elseBody;

    function init(filename, line, condition, thenBody, elseBody) {
        this.filename = filename;
        this.line = line;
        this.condition = condition;
        this.thenBody = thenBody;
        this.elseBody = elseBody;
    }

    function compile(context) {
        auto condVar = this.condition.compile(context);
        context.emitLine("if (" ~ condVar ~ ".data.int_value != 0) {");

        auto thenContext = CodegenContext(context);
        for (stmt in this.thenBody) {
            stmt.compile(thenContext);
        }
        context.emitLine(thenContext.getCurrentCode());
        context.emitLine("}");

        if (this.elseBody.length() > 0) {
            context.emitLine("else {");
            auto elseContext = CodegenContext(context);
            for (stmt in this.elseBody) {
                stmt.compile(elseContext);
            }
            context.emitLine(elseContext.getCurrentCode());
            context.emitLine("}");
        }

        return "";
    }
}

class WhileStatement : ASTFunctionNode {
    auto condition;
    auto body;

    function init(filename, line, condition, body) {
        this.filename = filename;
        this.line = line;
        this.condition = condition;
        this.body = body;
    }

    function compile(context) {
        context.emitLine("while (1) {");
        auto condVar = this.condition.compile(context);
        context.emitLine("if (" ~ condVar ~ ".data.int_value == 0) break;");

        auto bodyContext = CodegenContext(context);
        for (stmt in this.body) {
            stmt.compile(bodyContext);
        }
        context.emitLine(bodyContext.getCurrentCode());
        context.emitLine("}");

        return "";
    }
}

class ForInStatement : ASTFunctionNode {
    auto iteratorName;
    auto arrayExpression;
    auto body;

    function init(filename, line, iteratorName, arrayExpression, body) {
        this.filename = filename;
        this.line = line;
        this.iteratorName = iteratorName;
        this.arrayExpression = arrayExpression;
        this.body = body;
    }

    function compile(context) {
        auto arrayVar = this.arrayExpression.compile(context);
        auto indexVar = context.newVariable();
        auto lengthVar = context.newVariable();

        context.emitLine("Value " ~ indexVar ~ " = create_int(0);");
        context.emitLine("Value " ~ lengthVar ~ " = call_method(mod, &" ~ arrayVar ~ ", \"length\", NULL, 0);");
        context.emitLine("while (" ~ indexVar ~ ".data.int_value < " ~ lengthVar ~ ".data.int_value) {");
        context.emitLine("    Value " ~ this.iteratorName ~ " = call_method(mod, &" ~ arrayVar ~ ", \"get\", &" ~ indexVar ~ ", 1);");

        auto bodyContext = CodegenContext(context);
        for (stmt in this.body) {
            stmt.compile(bodyContext);
        }
        context.emitLine(bodyContext.getCurrentCode());

        context.emitLine("    " ~ indexVar ~ ".data.int_value++;");
        context.emitLine("}");

        return "";
    }
}

class AssignmentStatement : ASTFunctionNode {
    auto lhs;
    auto rhs;

    function init(filename, line, lhs, rhs) {
        this.filename = filename;
        this.line = line;
        this.lhs = lhs;
        this.rhs = rhs;
    }

    function compile(context) {
        auto rhsVar = this.rhs.compile(context);
        if (this.lhs.instanceOf(FieldAccess).isNull()) {
            auto lhsVar = this.lhs.compile(context);
            context.emitLine(lhsVar ~ " = " ~ rhsVar ~ ";");
        } else {
            auto objVar = this.lhs.object.compile(context);
            context.emitLine("object_set_field(&" ~ objVar ~ ", \"" ~ this.lhs.field ~ "\", " ~ rhsVar ~ ");");
        }
        return "";
    }
}

class ReturnStatement : ASTFunctionNode {
    auto expression;

    function init(filename, line, expression) {
        this.filename = filename;
        this.line = line;
        this.expression = expression;
    }

    function compile(context) {
        auto exprVar = this.expression.compile(context);
        context.emitLine("return " ~ exprVar ~ ";");
        return "";
    }
}

class ExpressionStatement : ASTFunctionNode {
    auto expression;

    function init(filename, line, expression) {
        this.filename = filename;
        this.line = line;
        this.expression = expression;
    }

    function compile(context) {
        auto var = this.expression.compile(context);
        context.emitLine(var ~ ";");
        return "";
    }
}

class Identifier : ASTFunctionNode {
    auto name;

    function init(filename, line, name) {
        this.filename = filename;
        this.line = line;
        this.name = name;
    }

    function compile(context) {
        if (this.name == "this") {
            return "*this_ptr";
        }
        return this.name;
    }
}

class IntegerLiteral : ASTFunctionNode {
    auto value;

    function init(filename, line, value) {
        this.filename = filename;
        this.line = line;
        this.value = value;
    }

    function compile(context) {
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = create_int(" ~ this.value.toString() ~ ");");
        return resultVar;
    }
}

class StringLiteral : ASTFunctionNode {
    auto value;

    function init(filename, line, value) {
        this.filename = filename;
        this.line = line;
        this.value = value;
    }

    function compile(context) {
        auto values = [];
        for (char_ in this.value) {
            values = values.push("create_int(" ~ char_.toString() ~ ")");
        }
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = create_array((Value[]){" ~ values.join(", ") ~ "}, " ~ this.value.length().toString() ~ ");");
        return resultVar;
    }
}

class NullLiteral : ASTFunctionNode {
    function init(filename, line) {
        this.filename = filename;
        this.line = line;
    }

    function compile(context) {
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = create_null();");
        return resultVar;
    }
}

class ArrayLiteral : ASTFunctionNode {
    auto elements;

    function init(filename, line, elements) {
        this.filename = filename;
        this.line = line;
        this.elements = elements;
    }

    function compile(context) {
        auto compiledElements = [];
        for (element in this.elements) {
            compiledElements = compiledElements.push(element.compile(context));
        }
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = create_array((Value[]){" ~ compiledElements.join(", ") ~ "}, " ~ this.elements.length().toString() ~ ");");
        return resultVar;
    }
}

class InstanceOfExpression : ASTFunctionNode {
    auto object;
    auto typeName;

    function init(filename, line, object, typeName) {
        this.filename = filename;
        this.line = line;
        this.object = object;
        this.typeName = typeName;
    }

    function compile(context) {
        auto objVar = this.object.compile(context);
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = instance_of(" ~ objVar ~ ", \"" ~ this.typeName ~ "\");");
        return resultVar;
    }
}

class FieldAccess : ASTFunctionNode {
    auto object;
    auto field;

    function init(filename, line, object, field) {
        this.filename = filename;
        this.line = line;
        this.object = object;
        this.field = field;
    }

    function compile(context) {
        auto objVar = this.object.compile(context);
        return "*object_get_field(" ~ objVar ~ ", \"" ~ this.field ~ "\")";
    }
}

class LogicalAndExpression : ASTFunctionNode {
    auto left;
    auto right;

    function init(filename, line, left, right) {
        this.filename = filename;
        this.line = line;
        this.left = left;
        this.right = right;
    }

    function compile(context) {
        auto leftVar = this.left.compile(context);
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = create_int(0);");
        context.emitLine("if (" ~ leftVar ~ ".data.int_value != 0) {");
        auto rightVar = this.right.compile(context);
        context.emitLine("    if (" ~ rightVar ~ ".data.int_value != 0) {");
        context.emitLine("        " ~ resultVar ~ " = create_int(1);");
        context.emitLine("    }");
        context.emitLine("}");
        return resultVar;
    }
}

class LogicalOrExpression : ASTFunctionNode {
    auto left;
    auto right;

    function init(filename, line, left, right) {
        this.filename = filename;
        this.line = line;
        this.left = left;
        this.right = right;
    }

    function compile(context) {
        auto leftVar = this.left.compile(context);
        auto resultVar = context.newVariable();
        context.emitLine("Value " ~ resultVar ~ " = create_int(0);");
        context.emitLine("if (" ~ leftVar ~ ".data.int_value != 0) {");
        context.emitLine("    " ~ resultVar ~ " = create_int(1);");
        context.emitLine("} else {");
        auto rightVar = this.right.compile(context);
        context.emitLine("    if (" ~ rightVar ~ ".data.int_value != 0) {");
        context.emitLine("        " ~ resultVar ~ " = create_int(1);");
        context.emitLine("    }");
        context.emitLine("}");
        return resultVar;
    }
}

class Parser {
    auto input;
    auto filename;
    auto position;
    auto line;

    function init(input, filename) {
        this.input = input;
        this.filename = filename;
        this.position = 0;
        this.line = 1;
    }

    function accept(s) {
        this.skipWhitespace();
        if (this.position + s.length() <= this.input.length()
            && this.input.slice(this.position, this.position + s.length()) == s)
        {
            this.position = this.position + s.length();
            return 1;
        }
        return 0;
    }

    function expect(s) {
        if (!this.accept(s)) {
            print("Expected '" ~ s ~ "' at " ~ this.filename ~ ":" ~ this.line.toString());
            assert(0);
        }
    }

    function skipWhitespace() {
        while (this.position < this.input.length()) {
            auto c = this.input.get(this.position);
            if (c == 32 || c == 9 || c == 10 || c == 13) {
                if (c == 10) {
                    this.line = this.line + 1;
                }
                this.position = this.position + 1;
            } else {
                break;
            }
        }
    }

    function skipComments() {
        while (1) {
            this.skipWhitespace();
            if (this.accept("//")) {
                while (this.position < this.input.length() && this.input.get(this.position) != 10) {
                    this.position = this.position + 1;
                }
            } else if (this.accept("/*")) {
                while (this.position < this.input.length() && !this.accept("*/")) {
                    if (this.input.get(this.position) == 10) {
                        this.line = this.line + 1;
                    }
                    this.position = this.position + 1;
                }
            } else {
                break;
            }
        }
    }

    function parseIdentifier() {
        this.skipWhitespace();
        this.skipComments();
        auto start = this.position;
        while (this.position < this.input.length()) {
            auto c = this.input.get(this.position);
            if (c >= 97 && c <= 122
                || c >= 65 && c <= 90
                || c == 95
                || this.position > start && c >= 48 && c <= 57
            ) {
                this.position = this.position + 1;
            } else {
                break;
            }
        }
        if (start == this.position) {
            print("Expected identifier at " ~ this.filename ~ ":" ~ this.line.toString());
            assert(0);
        }
        return this.input.slice(start, this.position);
    }

    function parse() {
        auto nodes = [];
        while (this.position < this.input.length()) {
            this.skipWhitespace();
            this.skipComments();
            if (this.accept("function")) {
                nodes = nodes.push(this.parseFunctionDecl());
            } else if (this.accept("class")) {
                nodes = nodes.push(this.parseClassDecl());
            } else {
                break;
            }
        }
        return Program(this.filename, 1, nodes);
    }

    function parseFunctionDecl() {
        auto name = this.parseIdentifier();
        auto params = [];

        this.expect("(");
        if (!this.accept(")")) {
            while (1) {
                params = params.push(this.parseIdentifier());
                if (!this.accept(",")) {
                    break;
                }
            }
            this.expect(")");
        }

        auto body = [];
        this.expect("{");
        while (!this.accept("}")) {
            body = body.push(this.parseStatement());
        }

        return FunctionDecl(this.filename, this.line, name, params, body);
    }

    function parseClassDecl() {
        auto name = this.parseIdentifier();
        auto parent = "";
        if (this.accept(":")) {
            parent = this.parseIdentifier();
        }
        auto fields = [];
        auto methods = [];

        this.expect("{");
        while (!this.accept("}")) {
            if (this.accept("function")) {
                methods = methods.push(this.parseFunctionDecl());
            } else {
                this.expect("auto");
                fields = fields.push(this.parseIdentifier());
                this.expect(";");
            }
        }

        return ClassDecl(this.filename, this.line, name, parent, fields, methods);
    }

    function parseStatement() {
        this.skipWhitespace();
        this.skipComments();

        if (this.accept("if")) {
            return this.parseIfStatement();
        } else if (this.accept("while")) {
            return this.parseWhileStatement();
        } else if (this.accept("for")) {
            return this.parseForInStatement();
        } else if (this.accept("return")) {
            auto expr = this.parseExpression();
            this.expect(";");
            return ReturnStatement(this.filename, this.line, expr);
        } else if (this.accept("auto")) {
            auto name = this.parseIdentifier();
            this.expect("=");
            auto initializer = this.parseExpression();
            this.expect(";");
            return VariableDecl(this.filename, this.line, name, initializer);
        } else {
            auto expr = this.parseExpression();
            if (this.accept("=")) {
                auto rhs = this.parseExpression();
                this.expect(";");
                return AssignmentStatement(this.filename, this.line, expr, rhs);
            } else {
                this.expect(";");
                return ExpressionStatement(this.filename, this.line, expr);
            }
        }
    }

    function parseIfStatement() {
        this.expect("(");
        auto condition = this.parseExpression();
        this.expect(")");

        auto thenBody = [];
        this.expect("{");
        while (!this.accept("}")) {
            thenBody = thenBody.push(this.parseStatement());
        }

        auto elseBody = [];
        if (this.accept("else")) {
            if (this.accept("if")) {
                elseBody = elseBody.push(this.parseIfStatement());
            } else {
                this.expect("{");
                while (!this.accept("}")) {
                    elseBody = elseBody.push(this.parseStatement());
                }
            }
        }

        return IfStatement(this.filename, this.line, condition, thenBody, elseBody);
    }

    function parseWhileStatement() {
        this.expect("(");
        auto condition = this.parseExpression();
        this.expect(")");

        auto body = [];
        this.expect("{");
        while (!this.accept("}")) {
            body = body.push(this.parseStatement());
        }

        return WhileStatement(this.filename, this.line, condition, body);
    }

    function parseForInStatement() {
        this.expect("(");
        auto iteratorName = this.parseIdentifier();
        this.expect("in");
        auto arrayExpression = this.parseExpression();
        this.expect(")");

        auto body = [];
        this.expect("{");
        while (!this.accept("}")) {
            body = body.push(this.parseStatement());
        }

        return ForInStatement(this.filename, this.line, iteratorName, arrayExpression, body);
    }

    function parseExpression() {
        return this.parseLogicalOrExpression();
    }

    function parseLogicalOrExpression() {
        auto left = this.parseLogicalAndExpression();

        while (this.accept("||")) {
            auto right = this.parseLogicalAndExpression();
            left = LogicalOrExpression(this.filename, this.line, left, right);
        }

        return left;
    }

    function parseLogicalAndExpression() {
        auto left = this.parseEqualityExpression();

        while (this.accept("&&")) {
            auto right = this.parseEqualityExpression();
            left = LogicalAndExpression(this.filename, this.line, left, right);
        }

        return left;
    }

    function parseEqualityExpression() {
        auto left = this.parseRelationalExpression();

        while (1) {
            if (this.accept("==")) {
                auto right = this.parseRelationalExpression();
                left = MethodCall(this.filename, this.line, left, "equal", [right]);
            } else if (this.accept("!=")) {
                auto right = this.parseRelationalExpression();
                left = MethodCall(this.filename, this.line, left, "notEqual", [right]);
            } else {
                break;
            }
        }

        return left;
    }

    function parseRelationalExpression() {
        auto left = this.parseAdditiveExpression();

        while (1) {
            if (this.accept("<=")) {
                auto right = this.parseAdditiveExpression();
                left = MethodCall(this.filename, this.line, left, "smallerEqual", [right]);
            } else if (this.accept(">=")) {
                auto right = this.parseAdditiveExpression();
                left = MethodCall(this.filename, this.line, left, "greaterEqual", [right]);
            } else if (this.accept("<")) {
                auto right = this.parseAdditiveExpression();
                left = MethodCall(this.filename, this.line, left, "smaller", [right]);
            } else if (this.accept(">")) {
                auto right = this.parseAdditiveExpression();
                left = MethodCall(this.filename, this.line, left, "greater", [right]);
            } else {
                break;
            }
        }

        return left;
    }

    function parseAdditiveExpression() {
        auto left = this.parseMultiplicativeExpression();

        while (1) {
            if (this.accept("+")) {
                auto right = this.parseMultiplicativeExpression();
                left = MethodCall(this.filename, this.line, left, "add", [right]);
            } else if (this.accept("-")) {
                auto right = this.parseMultiplicativeExpression();
                left = MethodCall(this.filename, this.line, left, "sub", [right]);
            } else if (this.accept("~")) {
                auto right = this.parseMultiplicativeExpression();
                left = MethodCall(this.filename, this.line, left, "concat", [right]);
            } else {
                break;
            }
        }

        return left;
    }

    function parseMultiplicativeExpression() {
        auto left = this.parseUnaryExpression();

        while (1) {
            if (this.accept("*")) {
                auto right = this.parseUnaryExpression();
                left = MethodCall(this.filename, this.line, left, "mul", [right]);
            } else if (this.accept("/")) {
                auto right = this.parseUnaryExpression();
                left = MethodCall(this.filename, this.line, left, "div", [right]);
            } else {
                break;
            }
        }

        return left;
    }

    function parseUnaryExpression() {
        if (this.accept("!")) {
            auto operand = this.parseUnaryExpression();
            return MethodCall(this.filename, this.line, operand, "not", []);
        } else if (this.accept("-")) {
            auto operand = this.parseUnaryExpression();
            return MethodCall(this.filename, this.line, operand, "negate", []);
        } else {
            return this.parsePrimary();
        }
    }

    function parseInstanceOf(left) {
        this.expect("(");
        auto typeName = this.parseIdentifier();
        this.expect(")");
        return InstanceOfExpression(this.filename, this.line, left, typeName);
    }

    function parsePrimary() {
        this.skipWhitespace();
        this.skipComments();

        auto expr = null;

        if (this.position < this.input.length() && this.input.get(this.position) >= 48 && this.input.get(this.position) <= 57) {
            expr = this.parseIntegerLiteral();
        } else if (this.accept("\"")) {
            expr = this.parseStringLiteral();
        } else if (this.accept("null")) {
            expr = NullLiteral(this.filename, this.line);
        } else if (this.accept("[")) {
            expr = this.parseArrayLiteral();
        } else {
            auto id = this.parseIdentifier();
            if (this.accept("(")) {
                auto args_ = [];
                if (!this.accept(")")) {
                    while (1) {
                        args_ = args_.push(this.parseExpression());
                        if (!this.accept(",")) {
                            break;
                        }
                    }
                    this.expect(")");
                }
                expr = FunctionCall(this.filename, this.line, id, args_);
            } else {
                expr = Identifier(this.filename, this.line, id);
            }
        }

        while (1) {
            if (this.accept(".instanceOf")) {
                expr = this.parseInstanceOf(expr);
            } else if (this.accept(".")) {
                auto identifier = this.parseIdentifier();
                if (this.accept("(")) {
                    auto args_ = [];
                    if (!this.accept(")")) {
                        while (1) {
                            args_ = args_.push(this.parseExpression());
                            if (!this.accept(",")) {
                                break;
                            }
                        }
                        this.expect(")");
                    }
                    expr = MethodCall(this.filename, this.line, expr, identifier, args_);
                } else {
                    expr = FieldAccess(this.filename, this.line, expr, identifier);
                }
            } else {
                break;
            }
        }

        return expr;
    }

    function parseArrayLiteral() {
        auto elements = [];
        if (!this.accept("]")) {
            while (1) {
                elements = elements.push(this.parseExpression());
                if (!this.accept(",")) {
                    break;
                }
            }
            this.expect("]");
        }
        return ArrayLiteral(this.filename, this.line, elements);
    }

    function parseIntegerLiteral() {
        auto start = this.position;
        while (this.position < this.input.length() && this.input.get(this.position) >= 48 && this.input.get(this.position) <= 57) {
            this.position = this.position + 1;
        }
        auto value = this.input.slice(start, this.position).toInt();
        return IntegerLiteral(this.filename, this.line, value);
    }

    function parseStringLiteral() {
        auto literal = [];
        while (this.position < this.input.length() && this.input.get(this.position) != 34) {
            // '\'
            if (this.input.get(this.position) == 92) {
                this.position = this.position + 1;
                // 'n'
                if (this.input.get(this.position) == 110) {
                    literal = literal.push(10);
                } else {
                    literal = literal.push(this.input.get(this.position));
                }
            } else {
                literal = literal.push(this.input.get(this.position));
            }
            this.position = this.position + 1;
        }
        this.expect("\"");
        return StringLiteral(this.filename, this.line, literal);
    }
}

function main(args_) {
    if (args_.length() != 3) {
        print("Usage: neat3 <input_file> <output_file>");
        return 0;
    }

    auto inputFile = args_.get(1);
    auto outputFile = args_.get(2);

    auto input = readFile(inputFile);

    auto parser = Parser(input, inputFile);
    auto program = parser.parse();

    auto output = program.compile();

    auto moduleSetup = "Module* mod = create_module();\n";
    for (node in program.nodes) {
        if (!node.instanceOf(FunctionDecl).isNull()) {
            auto emittedName = node.name;
            if (node.name == "main") {
                emittedName = "main2";
            }
            moduleSetup = moduleSetup ~ "module_add_entry(mod, (ModuleEntry){" ~
                ".name = \"" ~ node.name ~ "\", " ~
                ".type = ENTRY_FUNCTION, " ~
                ".data = { .function_call = " ~ emittedName ~ " }" ~
            "});\n";
        } else if (!node.instanceOf(ClassDecl).isNull()) {
            moduleSetup = moduleSetup ~ "module_add_entry(mod, (ModuleEntry){" ~
                ".name = \"" ~ node.name ~ "\"," ~
                ".type = ENTRY_CLASS, " ~
                ".data = { .class_type = &" ~ node.name ~ "_type }" ~
            "});\n";
        }
    }

    auto mainFunction = "int main(int argc, char** argv) {\n" ~
                        "    " ~ moduleSetup ~
                        "    Value args = create_array(NULL, argc);\n" ~
                        "    for (int i = 0; i < argc; i++) {\n" ~
                        "        Value arg = create_array(NULL, strlen(argv[i]));\n" ~
                        "        for (int j = 0; j < strlen(argv[i]); j++) {\n" ~
                        "            array_set(arg, j, create_int(argv[i][j]));\n" ~
                        "        }\n" ~
                        "        array_set(args, i, arg);\n" ~
                        "    }\n" ~
                        "    module_call(mod, \"main\", &args, 1);\n" ~
                        "    return 0;\n" ~
                        "}";

    output = "#include \"runtime.h\"\n\n" ~ output ~ "\n" ~ mainFunction;

    writeFile(outputFile, output);

    return 0;
}
